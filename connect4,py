import numpy as np
import pygame
import sys
import math

ROW_COUNT = 6
COL_COUNT = 7
BLUE = (0,0,255)
BLACK = (0,0,0)
RED = (255,0,0)
YELLOW = (255,255,0)

def create_board():
    board = np.zeros((ROW_COUNT,COL_COUNT))
    return board

def drop_piece(board,row,col,piece):
    board[row][col] = piece

def is_valid(board, col):
    return board[ROW_COUNT-1][col] == 0

def get_open_row(board, col):
    for r in range(ROW_COUNT):
        if board[r][col] == 0:
            return r

def print_board(board):
    print(np.flip(board,0))

def win(board, piece):
    for c in range(COL_COUNT-3):
        for r in range(ROW_COUNT):
            if board[r][c] == piece and board[r][c+1] == piece and board[r][c+2] == piece and board[r][c+3] == piece:
                return True
    
    for c in range(COL_COUNT):
        for r in range(ROW_COUNT-3):
            if board[r][c] == piece and board[r+1][c] == piece and board[r+2][c] == piece and board[r+3][c] == piece:
                return True
            
    for c in range(3,COL_COUNT):
        for r in range(3,ROW_COUNT):
            if board[r][c] == piece and board[r-1][c+1] == piece and board[r-2][c+2] == piece and board[r-3][c+3] == piece:
                return True       
    
    for c in range(COL_COUNT-3):
        for r in range(ROW_COUNT-3):
            if board[r][c] == piece and board[r+1][c+1] == piece and board[r+2][c+2] == piece and board[r+3][c+3] == piece:
                return True       

def drawboard(board):
    for c in range(COL_COUNT):
        for r in range(ROW_COUNT):
            pygame.draw.rect(screen,BLUE, (c*square_size, r*square_size+square_size, square_size,square_size))
            pygame.draw.circle(screen,BLACK, (int(c*square_size+square_size/2), int(r*square_size+square_size+square_size/2)), radius)
    for c in range(COL_COUNT):
        for r in range(ROW_COUNT):
            if board[r][c] == 1:
                pygame.draw.circle(screen,RED, (int(c*square_size+square_size/2), height - int(r*square_size+square_size/2)), radius)
            elif board[r][c] == 2:
                pygame.draw.circle(screen,YELLOW, (int(c*square_size+square_size/2), height - int(r*square_size+square_size/2)), radius)
    pygame.display.update()   
            
            
game_over = False
turn = 0
board = create_board()
pygame.init()
square_size = 100
width = COL_COUNT*square_size
height = (ROW_COUNT+1)*square_size
size = (width,height)
radius = int(square_size/2 - 10)
screen = pygame.display.set_mode(size)
drawboard(board)
myfont = pygame.font.SysFont("monospace", 65)
pygame.display.update()

while not game_over:

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            sys.exit()
        
        if event.type == pygame.MOUSEMOTION:
            posx = event.pos[0]
            pygame.draw.rect(screen,BLACK,(0,0,width,square_size))
            if turn == 0:
                pygame.draw.circle(screen,RED, (posx, int(square_size/2)),radius)
            else:
                pygame.draw.circle(screen,YELLOW, (posx, int(square_size/2)),radius)
        pygame.display.update()
            


        if event.type == pygame.MOUSEBUTTONDOWN:
            if turn == 0:
                posx = event.pos[0]
                col = int(math.floor(posx/square_size))

                if is_valid(board,col):
                    row = get_open_row(board, col)
                    drop_piece(board, row, col, 1)

                    if win(board, 1):
                        label = myfont.render("Player 1 Wins!",1,RED)
                        screen.blit(label, (100,15))
                        game_over = True

            else:
                posx = event.pos[0]
                col = int(math.floor(posx/square_size))

                if is_valid(board,col):
                    row = get_open_row(board, col)
                    drop_piece(board, row, col, 2)

                    if win(board, 2):
                        label = myfont.render("Player 2 Wins!",1,YELLOW)
                        screen.blit(label, (100,15))
                        game_over = True

            print_board(board)
            drawboard(board)
            turn += 1
            turn = turn % 2

            if game_over:
                pygame.time.wait(1000)




